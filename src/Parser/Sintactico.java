
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import Parser.Lexico;
import Arbol.Nodo;
import App.AppFrame;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\005\004\000\002\005\004\000\002\003\012" +
    "\000\002\003\010\000\002\003\006\000\002\003\004\000" +
    "\002\007\004\000\002\007\003\000\002\007\004\000\002" +
    "\006\006\000\002\006\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\006\003\004\020\005\001\002\000\004\021" +
    "\074\001\002\000\010\003\012\005\014\006\013\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\021\073\001\002\000\012\003\056\005\014\006\057" +
    "\027\060\001\002\000\004\016\054\001\002\000\004\017" +
    "\026\001\002\000\004\015\015\001\002\000\004\006\016" +
    "\001\002\000\004\017\017\001\002\000\006\007\020\011" +
    "\021\001\002\000\004\010\023\001\002\000\004\016\022" +
    "\001\002\000\012\003\ufffb\005\ufffb\006\ufffb\027\ufffb\001" +
    "\002\000\004\007\024\001\002\000\004\016\025\001\002" +
    "\000\012\003\ufffc\005\ufffc\006\ufffc\027\ufffc\001\002\000" +
    "\026\004\036\012\032\013\037\014\033\020\040\022\041" +
    "\023\034\024\031\025\027\026\030\001\002\000\026\004" +
    "\036\012\032\013\037\014\033\020\040\022\041\023\034" +
    "\024\031\025\027\026\030\001\002\000\026\004\036\012" +
    "\032\013\037\014\033\020\040\022\041\023\034\024\031" +
    "\025\027\026\030\001\002\000\026\004\036\012\032\013" +
    "\037\014\033\020\040\022\041\023\034\024\031\025\027" +
    "\026\030\001\002\000\030\004\uffec\012\uffec\013\uffec\014" +
    "\uffec\016\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\001\002\000\030\004\uffea\012\uffea\013\uffea\014" +
    "\uffea\016\uffea\020\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\001\002\000\026\004\036\012\032\013\037\014" +
    "\033\020\040\022\041\023\034\024\031\025\027\026\030" +
    "\001\002\000\004\016\046\001\002\000\030\004\uffed\012" +
    "\uffed\013\uffed\014\uffed\016\uffed\020\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\001\002\000\030\004\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\016\uffeb\020\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\001\002\000\004\006\044\001" +
    "\002\000\026\004\036\012\032\013\037\014\033\020\040" +
    "\022\041\023\034\024\031\025\027\026\030\001\002\000" +
    "\026\004\036\012\032\013\037\014\033\020\040\022\041" +
    "\023\034\024\031\025\027\026\030\001\002\000\030\004" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3\020\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\001\002\000\004\021" +
    "\045\001\002\000\030\004\uffee\012\uffee\013\uffee\014\uffee" +
    "\016\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\001\002\000\012\003\ufffa\005\ufffa\006\ufffa\027\ufffa" +
    "\001\002\000\026\004\036\012\032\013\037\014\033\020" +
    "\040\022\041\023\034\024\031\025\027\026\030\001\002" +
    "\000\030\004\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\020" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\001\002" +
    "\000\030\004\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\020" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\001\002" +
    "\000\030\004\uffef\012\uffef\013\uffef\014\uffef\016\uffef\020" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\001\002" +
    "\000\030\004\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\020" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\001\002" +
    "\000\012\003\ufff9\005\ufff9\006\ufff9\027\ufff9\001\002\000" +
    "\004\021\ufffe\001\002\000\004\016\072\001\002\000\006" +
    "\015\066\017\026\001\002\000\012\003\ufff4\006\ufff4\021" +
    "\ufff4\027\ufff4\001\002\000\004\021\ufffd\001\002\000\012" +
    "\003\063\006\064\021\ufff7\027\060\001\002\000\004\016" +
    "\071\001\002\000\004\015\066\001\002\000\004\021\ufff8" +
    "\001\002\000\004\004\067\001\002\000\004\016\070\001" +
    "\002\000\012\003\ufff5\006\ufff5\021\ufff5\027\ufff5\001\002" +
    "\000\004\021\ufff6\001\002\000\014\003\ufff9\005\ufff9\006" +
    "\ufff9\021\ufff6\027\ufff9\001\002\000\004\002\000\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\004\002\005\001\001\000\002\001\001\000" +
    "\006\003\010\005\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\010\005\054\006" +
    "\061\007\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\034\001\001\000\004\010\052\001\001" +
    "\000\004\010\051\001\001\000\004\010\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\041\001\001\000\004\010\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\061\007\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        AppFrame.tbErrores.setError(AppFrame.contadorErrores++, "Sintactico", "Componente: "+s.value+" no reconocido", s.left-1, s.right-2);
        /*System.out.println("Error Sintáctico en la Línea " + ((s.left)-1) +
        " Columna "+(s.right-1)+ ". No se esperaba este componente: " +s.value+"."); */
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        AppFrame.tbErrores.setError(AppFrame.contadorErrores++, "Sintactico", "Componente: "+s.value+" no reconocido", s.left-1, s.right-2);
        /*System.out.println("Error síntactico irrecuperable en la Línea " + 
        ((s.left)-1)+ " Columna "+(s.right-1)+". Componente " + s.value + 
        " no reconocido.");*/ 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= LLAVEIZQ instr LLAVEDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instr ::= instrucciones instr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instr ::= instrucciones operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= CONJ DOSPT IDENTIFICADOR ASIGN SIMBOLO HASTA SIMBOLO PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		AppFrame.conjuntos.put(a, b+c+d);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= CONJ DOSPT IDENTIFICADOR ASIGN RRCONCOMA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		AppFrame.conjuntos.put(a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= IDENTIFICADOR ASIGN regex PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        AppFrame.expresiones.add(a);
        AppFrame.primeros = new ArrayList<Integer>();
        AppFrame.ultimos = new ArrayList<Integer>();
        AppFrame.identificador++;
        AppFrame.primeros.add(AppFrame.identificador);
        AppFrame.ultimos.add(AppFrame.identificador);
        Nodo c = new Nodo("#", AppFrame.identificador, false,AppFrame.primeros, AppFrame.ultimos, null, null);
        AppFrame.identificador = 0;
        


        AppFrame.primeros = b.getPrimeros();
        AppFrame.ultimos = new ArrayList<Integer>();    
        boolean anul = false;
        if(b.isAnulabilidad() && c.isAnulabilidad()){
            anul = true;
        }
        if(b.isAnulabilidad()){
            for(int i = 0; i<c.getPrimeros().size(); i++){
                AppFrame.primeros.add(c.getPrimeros().get(i));
            }
        }
        if(c.isAnulabilidad()){
            AppFrame.ultimos = b.getUltimos();
            for(int i = 0; i<c.getUltimos().size(); i++){
                AppFrame.ultimos.add(c.getUltimos().get(i));
            }
        }else{
            AppFrame.ultimos = c.getUltimos();
        }
        AppFrame.Arboles.put(a ,new Nodo(".", AppFrame.ContadorNodos--, anul, AppFrame.primeros, AppFrame.ultimos, b, c));


              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= error PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operaciones ::= operacion operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operaciones ::= operacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operaciones ::= error PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operacion ::= IDENTIFICADOR DOSPT TODOS PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    AppFrame.expresionesEvaluar.put(b, a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operacion ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // regex ::= CONCATENACION regex regex 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        AppFrame.primeros = b.getPrimeros();
        AppFrame.ultimos = new ArrayList<Integer>();    
        boolean anul = false;
        if(b.isAnulabilidad() && c.isAnulabilidad()){
            anul = true;
        }
        if(b.isAnulabilidad()){
            for(int i = 0; i<c.getPrimeros().size(); i++){
                AppFrame.primeros.add(c.getPrimeros().get(i));
            }
        }
        if(c.isAnulabilidad()){
            AppFrame.ultimos = b.getUltimos();
            for(int i = 0; i<c.getUltimos().size(); i++){
                AppFrame.ultimos.add(c.getUltimos().get(i));
            }
        }else{
            AppFrame.ultimos = c.getUltimos();
        }
        RESULT = new Nodo(a, AppFrame.ContadorNodos--, anul, AppFrame.primeros, AppFrame.ultimos, b, c);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // regex ::= DISYUNCION regex regex 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        AppFrame.primeros = b.getPrimeros();
        AppFrame.ultimos = b.getUltimos();
        boolean anul = false;
        if(b.isAnulabilidad() || c.isAnulabilidad()){
            anul = true;
        }
        for(int i = 0; i<c.getPrimeros().size(); i++){
            AppFrame.primeros.add(c.getPrimeros().get(i));
        }
        for(int i = 0; i<c.getUltimos().size(); i++){
            AppFrame.ultimos.add(c.getUltimos().get(i));
        }

        RESULT = new Nodo(a, AppFrame.ContadorNodos--, anul, AppFrame.primeros, AppFrame.ultimos, b, c);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // regex ::= KLEEN regex 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        AppFrame.primeros = b.getPrimeros();
        AppFrame.ultimos = b.getUltimos();
        RESULT= new Nodo(a, AppFrame.ContadorNodos--, true, AppFrame.primeros, AppFrame.ultimos, null, b);    

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // regex ::= CERRADURAMAS regex 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        AppFrame.primeros = b.getPrimeros();
        AppFrame.ultimos = b.getUltimos();
        boolean anul = b.isAnulabilidad();
        RESULT= new Nodo(a, AppFrame.ContadorNodos--, anul, AppFrame.primeros, AppFrame.ultimos, null, b);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // regex ::= CERRADURAINTER regex 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        AppFrame.primeros = b.getPrimeros();
        AppFrame.ultimos = b.getUltimos();
        RESULT= new Nodo(a, AppFrame.ContadorNodos--, true, AppFrame.primeros, AppFrame.ultimos, null, b);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // regex ::= LLAVEIZQ IDENTIFICADOR LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        AppFrame.primeros = new ArrayList<Integer>();
        AppFrame.ultimos = new ArrayList<Integer>();
        AppFrame.identificador++;
        AppFrame.primeros.add(AppFrame.identificador);
        AppFrame.ultimos.add(AppFrame.identificador);
        
        RESULT = new Nodo(a, AppFrame.identificador, false,AppFrame.primeros, AppFrame.ultimos,null, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // regex ::= TODOS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        AppFrame.primeros = new ArrayList<Integer>();
        AppFrame.ultimos = new ArrayList<Integer>();
        AppFrame.identificador++;
        AppFrame.primeros.add(AppFrame.identificador);
        AppFrame.ultimos.add(AppFrame.identificador);
        
        RESULT = new Nodo(a, AppFrame.identificador, false,AppFrame.primeros, AppFrame.ultimos,null, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // regex ::= RESALTOLINEA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        AppFrame.primeros = new ArrayList<Integer>();
        AppFrame.ultimos = new ArrayList<Integer>();
        AppFrame.identificador++;
        AppFrame.primeros.add(AppFrame.identificador);
        AppFrame.ultimos.add(AppFrame.identificador);
        
        RESULT = new Nodo(a, AppFrame.identificador, false,AppFrame.primeros, AppFrame.ultimos,null, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // regex ::= RECOMILLASIMPLE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        AppFrame.primeros = new ArrayList<Integer>();
        AppFrame.ultimos = new ArrayList<Integer>();
        AppFrame.identificador++;
        AppFrame.primeros.add(AppFrame.identificador);
        AppFrame.ultimos.add(AppFrame.identificador);
        
        RESULT = new Nodo(a, AppFrame.identificador, false,AppFrame.primeros, AppFrame.ultimos,null, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // regex ::= RECOMILLASDOBLES 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        AppFrame.primeros = new ArrayList<Integer>();
        AppFrame.ultimos = new ArrayList<Integer>();
        AppFrame.identificador++;
        AppFrame.primeros.add(AppFrame.identificador);
        AppFrame.ultimos.add(AppFrame.identificador);
        
        RESULT = new Nodo(a, AppFrame.identificador, false,AppFrame.primeros, AppFrame.ultimos,null, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
